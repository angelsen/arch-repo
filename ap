#!/bin/bash
# ap - Angelsen's Package manager
# Lightweight AUR-like helper for custom packages

REPO="https://angelsen.github.io/arch-repo"
VERSION="1.1.0"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

install() {
    local package="$1"
    if [[ -z "$package" ]]; then
        echo -e "${RED}Error:${NC} Package name required"
        echo "Usage: ap install <package-name>"
        exit 1
    fi

    echo -e "${BLUE}📦 Installing${NC} $package..."

    # Create temp directory
    tmpdir=$(mktemp -d)
    trap 'rm -rf "$tmpdir"' EXIT
    cd "$tmpdir" || exit 1

    # Download PKGBUILD
    if ! curl -fsL "$REPO/pkgbuilds/$package/PKGBUILD" -o PKGBUILD; then
        echo -e "${RED}Error:${NC} Package '$package' not found!"
        exit 1
    fi

    # Download package files from packages.json
    echo -e "${BLUE}→${NC} Downloading package files..."

    # Get file list from packages.json (required)
    files=$(curl -s "$REPO/packages.json" 2>/dev/null | jq -r ".packages[] | select(.name == \"$package\") | .files[]?" 2>/dev/null)

    if [[ -z "$files" ]]; then
        echo -e "${RED}Error:${NC} Package files not found in packages.json. Repository may need updating."
        exit 1
    fi

    # Download each file
    for file in $files; do
        echo -e "  ${BLUE}↓${NC} $file"
        if ! curl -fsL "$REPO/pkgbuilds/$package/$file" -o "$file"; then
            echo -e "${RED}Error:${NC} Failed to download $file"
            exit 1
        fi
    done

    # Build and install
    echo -e "${BLUE}→${NC} Building package..."
    makepkg -si

    echo -e "${GREEN}✓${NC} Installation complete!"
}

list() {
    echo -e "${BLUE}📋 Available packages:${NC}"
    curl -s "$REPO/packages.json" 2>/dev/null | jq -r '.packages[].name' 2>/dev/null || {
        # Fallback if packages.json doesn't exist yet
        echo "  • google-chrome-stable-angelsen"
    }
}

search() {
    local query="$1"
    if [[ -z "$query" ]]; then
        list
        return
    fi

    echo -e "${BLUE}🔍 Searching for '${query}'...${NC}"
    curl -s "$REPO/packages.json" 2>/dev/null | jq -r ".packages[] | select(.name | contains(\"$query\")) | .name" 2>/dev/null || {
        # Fallback search
        if [[ "google-chrome-stable-angelsen" == *"$query"* ]]; then
            echo "  • google-chrome-stable-angelsen"
        else
            echo -e "${YELLOW}No packages found${NC}"
        fi
    }
}

update() {
    echo -e "${BLUE}🔄 Checking for updates...${NC}"

    # Get remote version
    remote_version=$(curl -s "$REPO/ap" | grep "^VERSION=" | cut -d'"' -f2)

    if [[ -z "$remote_version" ]]; then
        echo -e "${RED}Error:${NC} Could not fetch remote version"
        exit 1
    fi

    if [[ "$remote_version" == "$VERSION" ]]; then
        echo -e "${GREEN}✓${NC} Already up to date (v$VERSION)"
        return 0
    fi

    echo -e "${YELLOW}→${NC} Updating from v$VERSION to v$remote_version"

    # Download new version
    if curl -fsL "$REPO/ap" -o /tmp/ap.new; then
        chmod +x /tmp/ap.new
        sudo mv /tmp/ap.new /usr/local/bin/ap
        echo -e "${GREEN}✓${NC} Updated successfully to v$remote_version!"
    else
        echo -e "${RED}Error:${NC} Failed to download update"
        exit 1
    fi
}

version() {
    echo "ap version $VERSION"
    echo "Repository: $REPO"

    # Check for updates
    echo -e "\n${BLUE}Checking for updates...${NC}"
    remote_version=$(curl -s "$REPO/ap" 2>/dev/null | grep "^VERSION=" | cut -d'"' -f2)

    if [[ -n "$remote_version" ]]; then
        if [[ "$remote_version" != "$VERSION" ]]; then
            echo -e "${YELLOW}→ Update available:${NC} v$remote_version"
            echo -e "  Run 'ap update' to upgrade"
        else
            echo -e "${GREEN}✓${NC} You're on the latest version"
        fi
    else
        echo -e "${YELLOW}⚠${NC} Could not check for updates"
    fi
}

help() {
    cat <<EOF
ap - Angelsen's Package manager v$VERSION

Usage: ap <command> [options]

Commands:
  install <package>  Install a package
  list              List available packages
  search <query>    Search for packages
  update            Update ap itself
  version           Show version info
  help              Show this help

Examples:
  ap install google-chrome-stable-angelsen
  ap search chrome
  ap update

Repository: $REPO
EOF
}

# Main
case "$1" in
    install | i) install "$2" ;;
    list | l) list ;;
    search | s) search "$2" ;;
    update | u) update ;;
    version | v) version ;;
    help | h | "") help ;;
    *)
        echo -e "${RED}Unknown command:${NC} $1"
        echo "Try 'ap help' for usage"
        exit 1
        ;;
esac
